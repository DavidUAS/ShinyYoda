library(keras)
library(tfdatasets)

#################################################### Importing and normalizing the data
train_file_path <- "train6.csv"

the.data <- read.csv(train_file_path)

the.data$eGOS <- the.data$eGOS - 1                                 ##### <-------- Python b?rjar r?kna fr?n 0. S? eGOS ska g?r fr?n 0 - 7.

the.data$motor <- the.data$motor /10
the.data$pupil <- the.data$pupil / 3
the.data$age <- the.data$age / 100
the.data$length <- the.data$length /100
the.data$motor2 <- the.data$motor2 / 10

#train.data <- the.data[1:350, ]
#test.data <- the.data[351:421, ]

ind <- sample(2, nrow(the.data), replace=TRUE, prob = c(0.8, 0.2))
train.data <- the.data[ind==1,]
test.data <- the.data[ind==2,]

###################################### Formatting the training data
train.features <- train.data[, c("motor", "pupil", "age", "length", "motor2")]
train.x <- as.matrix(train.features)

train.y <- to_categorical(train.data$eGOS, 8) # <--- antalet labels


###################################### Formatting the testing data
test.features <- test.data[, c("motor", "pupil", "age", "length", "motor2")]
test.x <- as.matrix(test.features)

test.y <- to_categorical(test.data$eGOS, 8) # <--- antalet labels

#### dvs x = features och y = labels

################################# Designing the network


model <- keras_model_sequential() 
model %>% 
  layer_dense(units = 6, activation = 'relu', input_shape = c(5)) %>%  # <------- Input shape ?r antalet kolumner i train.x (antal features).
  layer_dropout(rate = 0.5) %>% 
  layer_dense(units = 6, activation = 'relu') %>%
  layer_dropout(rate = 0.5) %>% 
  layer_dense(units = 8, activation = 'softmax')

summary(model)

model %>% compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = c('accuracy'))

################################# Training the network


history <- model %>% fit(
  train.x, train.y, 
  epochs = 30, batch_size = 30, 
  validation_split = 0.2
)
plot(history)

######################## Evaluation of the network
evaluate(model, test.x, test.y)


############################################################
### Make predictions

probabilities <- predict(model, test.x)
predicted.egos <- apply(probabilities, 1, which.max)

actual.egos <- apply(test.y, 1, which.max)

############################################################
### Create confusion matrix

library(ggplot2)
library(reshape)

source("ConfusionMatrix_Count.R")
source("ConfusionMatrix_Normalize.R")
source("ConfusionMatrix_Plot.R")
source("ConfusionMatrix_GOSE.R")

confusion.matrix <- ConfusionMatrix_GOSE(actual.egos, predicted.egos)
confusion.matrix$Graph

################################################# Predict using novel data
motor=0.5
pupil=0.333333
age=0.15
length=0.23
motor2=0.6

test.test <- as.matrix(data.frame(motor, pupil, age, length, motor2))
probabilities.test <- predict(model, test.test)
predicted.egos <- apply(probabilities.test, 1, which.max)
predicted.egos
